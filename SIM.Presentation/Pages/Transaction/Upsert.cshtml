@page "{id?}"
@model SIM.Presentation.Pages.Transactions.UpsertModel
@{
    ViewData["ActivePage"] = "Transactions";
    bool isEditMode = Model.Id.HasValue;
}
@using SIM.Core.Enums
@using SIM.Core.DTOs.Requests

<div class="max-w-3xl mx-auto p-6 bg-gray-800 rounded-lg shadow-sm border border-gray-700 text-white">
    <h2 class="text-xl font-semibold mb-4 text-white">
        @(isEditMode ? "Edit Transaction" : "Create Transaction")
    </h2>

    <form method="post" id="transactionForm">
        @Html.AntiForgeryToken()
        <div class="grid grid-cols-2 gap-4">
            <input type="hidden" asp-for="Transaction.Id" />

            <!-- Transaction Type -->
            <div>
                <label class="block text-sm font-medium text-gray-200">Transaction Type</label>
                <select asp-for="Transaction.TransactionType" asp-items="Model.TransactionTypeOptions"
                    id="TransactionType"
                    class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2">
                    <option value="">-- Select Transaction Type --</option>
                </select>
            </div>

            <!-- Category -->
            <div>
                <label class="block text-sm font-medium text-gray-200">Category</label>
                <select asp-for="Transaction.CategoryId" asp-items="Model.CategoryOptions" id="CategorySelect"
                    class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2">
                    <option value="">-- Select Category --</option>
                </select>
            </div>

            <!-- Vendor -->
            <div>
                <label class="block text-sm font-medium text-gray-200">Vendor</label>
                <div class="flex gap-2">
                    <select asp-for="Transaction.VendorId" asp-items="Model.VendorOptions" id="VendorSelect"
                        class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2">
                        <option value="">-- Select Vendor --</option>
                    </select>

                    <button type="button" id="btnNewVendor"
                        class="px-3 py-2 bg-green-600 text-white rounded flex items-center gap-2">
                        <span class="material-symbols-outlined align-middle">store</span>
                        <span class="align-middle">New</span>
                    </button>
                </div>
            </div>

            <!-- Total Amount -->
            <div>
                <label class="block text-sm font-medium text-gray-200">Total Amount</label>
                <input asp-for="Transaction.TotalAmount"
                    class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2"
                    id="TotalAmount" />
            </div>
        </div>

        <div id="vendorInlineContainer" class="mt-3 mb-4"></div>

        <hr class="my-4" />

        <!-- Expense Section -->
        <div id="expenseSection"
            style="display:@(Model.Transaction.TransactionType == TransactionTypeEnum.Expense ? "block" : "none")">
            <div id="itemsHeader" class="inline-flex items-center mb-2 gap-2">
                <h2 class="text-xl font-semibold text-white">Items</h2>
                <button type="button" class="px-3 py-2 bg-blue-600 text-white rounded flex items-center justify-center"
                    id="btnAddItem" aria-label="Add item">
                    <span class="material-symbols-outlined">add_shopping_cart</span>
                </button>
            </div>

            <div id="itemsContainer" class="space-y-2">
                @if (Model.Transaction.Items.Count > 0 && Model.Transaction.Items.Any())
                {
                    var i = 0;
                    foreach (var item in Model.Transaction.Items)
                    {
                        <partial name="TransactionItemPartial"
                            model="new TransactionItemInputModel { Index = i, TransactionId = item.TransactionId, Id = item.Id, ItemName = item.ItemName, Price = item.Price, Quantity = item.Quantity, Total = item.Total }" />
                        i++;
                    }
                }
            </div>
        </div>

        <div class="mt-6 flex justify-end gap-2">
            <a asp-page="/Dashboard/Index" class="px-4 py-2 border border-gray-600 rounded text-white">Cancel</a>
            <button type="submit" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 text-white rounded">
                @(isEditMode ? "Update" : "Create")
            </button>
        </div>
    </form>
</div>

<partial name="_Toast" />

@section Scripts {
    <script>
        const pageBaseUrl = '@Url.Page("/Transactions/Upsert")';
        let itemIndex = @Model.Transaction.Items?.Count() ?? 0;

        // Toggle expense section
        document.getElementById("TransactionType").addEventListener("change", function () {
            const selectedType = parseInt(this.value);
            const TransactionTypeEnum = {
                Expense: parseInt('@((int)TransactionTypeEnum.Expense)'),
                Income: parseInt('@((int)TransactionTypeEnum.Income)')
            };
            const expenseSection = document.getElementById("expenseSection");
            const totalAmountInput = document.getElementById("TotalAmount");

            if (selectedType === TransactionTypeEnum.Expense) {
                expenseSection.style.display = "block";
            } else {
                expenseSection.style.display = "none";
                totalAmountInput.value = "";
                itemIndex = 0;
                document.getElementById("itemsContainer").innerHTML = "";
                updateTotalAmount();
            }
        });

        // Load new vendor partial
        document.getElementById("btnNewVendor")?.addEventListener("click", function () {
            const url = `${pageBaseUrl}?handler=VendorPartial`;
            fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(res => res.text())
                .then(html => {
                    document.getElementById("vendorInlineContainer").innerHTML = html;
                    this.style.display = "none";
                });
        });

        // Add new item row
        document.getElementById("btnAddItem")?.addEventListener("click", function () {
            const idx = itemIndex++;
            const url = `${pageBaseUrl}?handler=ItemPartial&index=${idx}`;
            fetch(url, { headers: { 'X-Requested-With': 'XMLHttpRequest' } })
                .then(res => res.text())
                .then(html => {
                    const temp = document.createElement('div');
                    temp.innerHTML = html;
                    const newRow = temp.firstElementChild;
                    document.getElementById("itemsContainer").appendChild(newRow);
                    attachRowEvents(newRow);
                });
        });

        // Compute totals
        function attachRowEvents(row) {
            const qty = row.querySelector(".item-qty");
            const price = row.querySelector(".item-price");
            const remove = row.querySelector(".remove-item");

            if (qty && price) {
                qty.addEventListener("input", () => computeRowTotal(row));
                price.addEventListener("input", () => computeRowTotal(row));
            }
            if (remove) {
                remove.addEventListener("click", () => {
                    row.remove();
                    updateTotalAmount();
                });
            }
        }

        function computeRowTotal(row) {
            const qty = parseFloat(row.querySelector(".item-qty").value) || 0;
            const price = parseFloat(row.querySelector(".item-price").value) || 0;
            const total = row.querySelector(".item-total");
            total.value = (qty * price).toFixed(2);
            updateTotalAmount();
        }

        function updateTotalAmount() {
            const total = Array.from(document.querySelectorAll(".item-total"))
                .reduce((sum, el) => sum + (parseFloat(el.value) || 0), 0);
            document.getElementById("TotalAmount").value = total.toFixed(2);
        }

        // Attach events for existing items
        document.querySelectorAll("#itemsContainer .item-row").forEach(r => attachRowEvents(r));
    </script>
}