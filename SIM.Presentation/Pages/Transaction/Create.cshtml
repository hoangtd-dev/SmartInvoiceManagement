@page
@model SIM.Presentation.Pages.Transactions.CreateModel
@{
    ViewData["ActivePage"] = "Transactions";
}

<div class="max-w-3xl mx-auto p-6 bg-gray-800 rounded-lg shadow-sm border border-gray-700 text-white">
    <h2 class="text-xl font-semibold mb-4 text-white">Create Transaction</h2>

    <form method="post">
        <input type="hidden" asp-for="Input.TotalAmount" id="TotalAmountHidden" />

        <div class="grid grid-cols-2 gap-4">
            <div>
                <label class="block text-sm font-medium text-gray-200">Transaction Type</label>
                <select asp-for="Input.TransactionType"
                    class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2">
                    @foreach (var t in Model.TransactionTypeOptions)
                    {
                        <option value="@t.Value">@t.Text</option>
                    }
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-200">Category</label>
                <select asp-for="Input.CategoryId"
                    class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2">
                    <option value="">-- Select Category --</option>
                    @foreach (var c in Model.CategoryOptions)
                    {
                        <option value="@c.Value">@c.Text</option>
                    }
                </select>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-200">Vendor</label>
                <div class="flex gap-2">
                    <select asp-for="Input.VendorId"
                        class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2">
                        <option value="">-- Select Vendor --</option>
                        @foreach (var v in Model.VendorOptions)
                        {
                            <option value="@v.Value"
                                selected="@(Model.Input.VendorId == int.Parse(v.Value) ? "selected" : null)">@v.Text
                            </option>
                        }
                    </select>
                    <button type="button" class="px-3 py-2 bg-green-600 text-white rounded"
                        onclick="openVendorModal()">New</button>
                </div>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-200">Total Amount</label>
                <input asp-for="Input.TotalAmount"
                    class="mt-1 block w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2"
                    id="TotalAmount" />
            </div>
        </div>

        <hr class="my-4" />

        <div>
            <h3 class="font-medium mb-2 text-white">Items</h3>
            <div id="itemsContainer" class="space-y-2">
                <!-- items will be added here -->
            </div>
            <div class="mt-3">
                <button type="button" class="px-4 py-2 bg-blue-600 text-white rounded" onclick="addItemRow()">Add
                    Item</button>
            </div>
        </div>

        <div class="mt-6 flex justify-end gap-2">
            <a asp-page="/Dashboard/Index" class="px-4 py-2 border border-gray-600 rounded text-white">Cancel</a>
            <button type="submit" class="px-4 py-2 bg-indigo-600 hover:bg-indigo-500 text-white rounded">Create</button>
        </div>
    </form>
</div>

<!-- Vendor Modal (simple inline form) -->
<div id="vendorModal" style="display:none; position:fixed; inset:0; background:rgba(0,0,0,0.6);">
    <div style="max-width:640px; margin:6rem auto; padding:1rem; border-radius:6px;">
        <div class="bg-gray-800 rounded-lg border border-gray-700 p-4 text-white">
            <h3 class="text-lg font-semibold mb-2">Create Vendor</h3>
            <form method="post" asp-page-handler="CreateVendor">
                <div class="grid grid-cols-1 gap-2">
                    <input asp-for="NewVendor.VendorName" placeholder="Vendor name"
                        class="w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2" />
                    <input asp-for="NewVendor.ContactEmail" placeholder="Email"
                        class="w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2" />
                    <input asp-for="NewVendor.ContactPhone" placeholder="Phone"
                        class="w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2" />
                    <input asp-for="NewVendor.Address" placeholder="Address"
                        class="w-full rounded bg-gray-700 border border-gray-600 text-white px-3 py-2" />
                </div>
                <div class="mt-3 flex justify-end gap-2">
                    <button type="button" class="px-3 py-2 border border-gray-600 rounded text-white"
                        onclick="closeVendorModal()">Cancel</button>
                    <button type="submit" class="px-3 py-2 bg-green-600 text-white rounded">Create</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    const productOptions = [
        @foreach (var p in Model.ProductOptions)
        {
            <text>{id: @p.Value, text: '@p.Text' },</text>
        }
    ];

    function openVendorModal() {
        document.getElementById('vendorModal').style.display = 'block';
    }
    function closeVendorModal() {
        document.getElementById('vendorModal').style.display = 'none';
    }

    let itemIndex = 0;
    function addItemRow() {
        const container = document.getElementById('itemsContainer');
        const row = document.createElement('div');
        row.className = 'flex gap-2 items-center';
        row.id = 'item-' + itemIndex;

        const select = document.createElement('select');
        select.name = `Input.Items[${itemIndex}].ProductId`;
        select.className = 'mt-1 block rounded bg-gray-700 border border-gray-600 text-white px-3 py-2';
        productOptions.forEach(p => {
            const opt = document.createElement('option');
            opt.value = p.id;
            opt.text = p.text;
            select.appendChild(opt);
        });

        const qty = document.createElement('input');
        qty.type = 'number';
        qty.min = 1;
        qty.value = 1;
        qty.name = `Input.Items[${itemIndex}].Quantity`;
        qty.className = 'mt-1 rounded bg-gray-700 border border-gray-600 text-white px-3 py-2 w-20';
        qty.oninput = updateRowTotal;

        const price = document.createElement('input');
        price.type = 'number';
        price.step = '0.01';
        price.value = 0;
        price.name = `Input.Items[${itemIndex}].Price`;
        price.className = 'mt-1 rounded bg-gray-700 border border-gray-600 text-white px-3 py-2 w-32';
        price.oninput = updateRowTotal;

        const total = document.createElement('input');
        total.type = 'number';
        total.step = '0.01';
        total.value = 0;
        total.name = `Input.Items[${itemIndex}].Total`;
        total.className = 'mt-1 rounded bg-gray-700 border border-gray-600 text-white px-3 py-2 w-32';
        total.readOnly = true;

        const remove = document.createElement('button');
        remove.type = 'button';
        remove.className = 'px-2 py-1 bg-red-600 text-white rounded';
        remove.textContent = 'Remove';
        remove.onclick = () => { container.removeChild(row); computeTotalAmount(); };

        row.appendChild(select);
        row.appendChild(qty);
        row.appendChild(price);
        row.appendChild(total);
        row.appendChild(remove);

        container.appendChild(row);
        itemIndex++;
    }

    function updateRowTotal(e) {
        const row = e.target.closest('div');
        const qty = row.querySelector('input[type="number"][name*="Quantity"]');
        const price = row.querySelector('input[type="number"][name*="Price"]');
        const total = row.querySelector('input[name*="Total"]');
        const q = parseFloat(qty.value || 0);
        const p = parseFloat(price.value || 0);
        total.value = (q * p).toFixed(2);
        computeTotalAmount();
    }

    function computeTotalAmount() {
        let sum = 0;
        document.querySelectorAll('input[name*=".Total"]').forEach(i => {
            sum += parseFloat(i.value || 0);
        });
        document.getElementById('TotalAmount').value = sum.toFixed(2);
        document.getElementById('TotalAmountHidden').value = sum.toFixed(2);
    }
</script>